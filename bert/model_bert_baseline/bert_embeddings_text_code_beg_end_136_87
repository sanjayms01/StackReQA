{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"bert_embeddings_text_code_beg_end_136_87","provenance":[],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","name":"python3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6ur3ixnlycEo","executionInfo":{"status":"ok","timestamp":1617564844568,"user_tz":300,"elapsed":413,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}},"outputId":"3d2f6f43-d135-4e16-e4f5-3214248c4fd6"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3fxOFlSneTau","executionInfo":{"status":"ok","timestamp":1617564849626,"user_tz":300,"elapsed":3057,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}},"outputId":"e1915783-05bb-47cd-f009-afaf20ecbc9d"},"source":["pip install transformers"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: transformers in /usr/local/lib/python3.7/dist-packages (4.4.2)\n","Requirement already satisfied: tokenizers<0.11,>=0.10.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.10.1)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.0.12)\n","Requirement already satisfied: sacremoses in /usr/local/lib/python3.7/dist-packages (from transformers) (0.0.44)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from transformers) (20.9)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.41.1)\n","Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from transformers) (3.8.1)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.19.5)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.0.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (7.1.2)\n","Requirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from sacremoses->transformers) (1.15.0)\n","Requirement already satisfied: pyparsing>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->transformers) (2.4.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2020.12.5)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.4.1)\n","Requirement already satisfied: typing-extensions>=3.6.4; python_version < \"3.8\" in /usr/local/lib/python3.7/dist-packages (from importlib-metadata; python_version < \"3.8\"->transformers) (3.7.4.3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"6VOIuvjGjlw3","executionInfo":{"status":"ok","timestamp":1617564849629,"user_tz":300,"elapsed":2429,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}}},"source":["import sys\n","# sys.path.remove('/content/drive/MyDrive/Colab Notebooks/W266 Final Project/master/helper_functions')\n","sys.path.append('/content/drive/MyDrive/Colab Notebooks/W266 Final Project/master/helper_functions')"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LVhGRln-juWi","executionInfo":{"status":"ok","timestamp":1617564849631,"user_tz":300,"elapsed":2130,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}},"outputId":"fa7a4c5f-06c6-4ca5-8508-e7b3fa7aaa28"},"source":["for p in sys.path:\n","  print(p)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["\n","/content\n","/env/python\n","/usr/lib/python37.zip\n","/usr/lib/python3.7\n","/usr/lib/python3.7/lib-dynload\n","/usr/local/lib/python3.7/dist-packages\n","/usr/lib/python3/dist-packages\n","/usr/local/lib/python3.7/dist-packages/IPython/extensions\n","/root/.ipython\n","/content/drive/MyDrive/Colab Notebooks/W266 Final Project/master/helper_functions\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"RUC4qc_yj9U8"},"source":["# Imports"]},{"cell_type":"code","metadata":{"id":"jR7iTVGVj-9x","executionInfo":{"status":"ok","timestamp":1617564851637,"user_tz":300,"elapsed":3294,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}}},"source":["import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","import tensorflow_hub as hub\n","import math\n","import random\n","import pickle\n","import time\n","\n","from numpy.linalg import norm\n","from scipy.stats import rankdata\n","from transformers import BertTokenizer, TFBertModel\n","\n","from tensorflow.keras import layers\n","from tensorflow.keras.layers import Dense, Flatten\n","\n","import parse\n","import bert_funcs as bf\n","import evaluation"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"whzGGkqQkBsS","executionInfo":{"status":"ok","timestamp":1617564857539,"user_tz":300,"elapsed":8650,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}},"outputId":"0a586314-3449-493e-f0ed-31cc9d6ae80f"},"source":["df = pd.read_csv(r'/content/drive/MyDrive/Colab Notebooks/W266 Final Project/data/raw_data_preprocessed.csv')\n","# , dtype={'question_id':'str', \n","# 'question_title_raw':'str', \n","# 'question_body_raw':'str',\n","# 'question_body':'str', \n","# 'question_body_text':'str', \n","# 'question_body_code':'str',\n","# 'question_title_body_raw':'str', \n","# 'question_title_body':'str',\n","# 'question_title_body_text':'str', \n","# 'question_title_body_code':'str', \n","# 'answer_id':'str',\n","# 'answer_body_raw':'str', \n","# 'answer_body':'str', \n","# 'answer_text':'str', \n","# 'answer_code':'str',\n","# 'answer_count':'Int64', \n","# 'view_count':'Int64', \n","# 'answer_score':'Int64', \n","# 'is_accepted_answer':'Int64'})\n","df.head(5)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question_id</th>\n","      <th>question_title_raw</th>\n","      <th>question_body_raw</th>\n","      <th>question_body</th>\n","      <th>question_body_text</th>\n","      <th>question_body_code</th>\n","      <th>question_title_body_raw</th>\n","      <th>question_title_body</th>\n","      <th>question_title_body_text</th>\n","      <th>question_title_body_code</th>\n","      <th>answer_id</th>\n","      <th>answer_body_raw</th>\n","      <th>answer_body</th>\n","      <th>answer_text</th>\n","      <th>answer_code</th>\n","      <th>answer_count</th>\n","      <th>view_count</th>\n","      <th>answer_score</th>\n","      <th>is_accepted_answer</th>\n","      <th>question_title_body_order_textcode</th>\n","      <th>question_title_body_order_codetext</th>\n","      <th>answer_body_order_textcode</th>\n","      <th>answer_body_order_codetext</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>55661532</td>\n","      <td>When I run my socket program, there get: `impo...</td>\n","      <td>&lt;p&gt;I write a socket server programmer:&lt;/p&gt;\\n\\n...</td>\n","      <td>I write a socket server programmer:\\n#-*- codi...</td>\n","      <td>I write a socket server programmer:\\n\\nwhen I ...</td>\n","      <td>#-*- coding:utf-8 -*-\\n# Author:sele\\n\\nimport...</td>\n","      <td>When I run my socket program, there get: `impo...</td>\n","      <td>When I run my socket program, there get: `impo...</td>\n","      <td>When I run my socket program, there get: `impo...</td>\n","      <td>#-*- coding:utf-8 -*-\\n# Author:sele\\n\\nimport...</td>\n","      <td>55661630</td>\n","      <td>&lt;p&gt;The answer to your new question is that you...</td>\n","      <td>The answer to your new question is that you ca...</td>\n","      <td>The answer to your new question is that you ca...</td>\n","      <td>socket.socket(socket.AF_INET, socket.SOCK_STRE...</td>\n","      <td>2</td>\n","      <td>1816</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>When I run my socket program, there get: `impo...</td>\n","      <td>#-*- coding:utf-8 -*-\\n# Author:sele\\n\\nimport...</td>\n","      <td>The answer to your new question is that you ca...</td>\n","      <td>socket.socket(socket.AF_INET, socket.SOCK_STRE...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>55661626</td>\n","      <td>with socket.socket(socket.AF_INET, socket.SOCK...</td>\n","      <td>&lt;p&gt;I have a socket server program:&lt;/p&gt;\\n\\n&lt;pre...</td>\n","      <td>I have a socket server program:\\n#!/usr/bin/en...</td>\n","      <td>I have a socket server program:\\n\\nwhen I run ...</td>\n","      <td>#!/usr/bin/env python\\n#-*- coding:utf-8 -*-\\n...</td>\n","      <td>with socket.socket(socket.AF_INET, socket.SOCK...</td>\n","      <td>with socket.socket(socket.AF_INET, socket.SOCK...</td>\n","      <td>with socket.socket(socket.AF_INET, socket.SOCK...</td>\n","      <td>#!/usr/bin/env python\\n#-*- coding:utf-8 -*-\\n...</td>\n","      <td>55661660</td>\n","      <td>&lt;p&gt;You can't use &lt;code&gt;socket.socket(socket.AF...</td>\n","      <td>You can't use socket.socket(socket.AF_INET, so...</td>\n","      <td>You can't use  with .  So that a  statement ca...</td>\n","      <td>socket.socket(socket.AF_INET, socket.SOCK_STRE...</td>\n","      <td>2</td>\n","      <td>2521</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>with socket.socket(socket.AF_INET, socket.SOCK...</td>\n","      <td>#!/usr/bin/env python\\n#-*- coding:utf-8 -*-\\n...</td>\n","      <td>You can't use  with .  So that a  statement ca...</td>\n","      <td>socket.socket(socket.AF_INET, socket.SOCK_STRE...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>55661929</td>\n","      <td>How to display 5 numbers per line from a list?</td>\n","      <td>&lt;p&gt;How to display 5 numbers per line from a li...</td>\n","      <td>How to display 5 numbers per line from a list?...</td>\n","      <td>How to display 5 numbers per line from a list?...</td>\n","      <td>lx = [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,...</td>\n","      <td>How to display 5 numbers per line from a list?...</td>\n","      <td>How to display 5 numbers per line from a list?...</td>\n","      <td>How to display 5 numbers per line from a list?...</td>\n","      <td>lx = [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,...</td>\n","      <td>55662134</td>\n","      <td>&lt;p&gt;There can be different approaches to the pr...</td>\n","      <td>There can be different approaches to the probl...</td>\n","      <td>There can be different approaches to the probl...</td>\n","      <td>x=[]  #your given list\\nfor t in range(len(x))...</td>\n","      <td>4</td>\n","      <td>125</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>How to display 5 numbers per line from a list?...</td>\n","      <td>lx = [1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,...</td>\n","      <td>There can be different approaches to the probl...</td>\n","      <td>x=[]  #your given list\\nfor t in range(len(x))...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>55662778</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>&lt;p&gt;I want to print &lt;code&gt;&amp;gt;&lt;/code&gt; in the sc...</td>\n","      <td>I want to print &gt; in the script 0 to test the ...</td>\n","      <td>I want to print  in the script 0 to test the c...</td>\n","      <td>&gt;script[0][4][2]name 'script' is not defined\\n...</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>&gt;script[0][4][2]name 'script' is not defined\\n...</td>\n","      <td>55662821</td>\n","      <td>&lt;p&gt;Define list as &lt;code&gt;[]&lt;/code&gt; and use &lt;cod...</td>\n","      <td>Define list as [] and use append to add elemen...</td>\n","      <td>Define list as  and use  to add elements to li...</td>\n","      <td>[]appendscript = []\\n\\nscript.append(['A','A',...</td>\n","      <td>2</td>\n","      <td>24</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>&gt;script[0][4][2]name 'script' is not defined\\n...</td>\n","      <td>Define list as  and use  to add elements to li...</td>\n","      <td>[]appendscript = []\\n\\nscript.append(['A','A',...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>55662778</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>&lt;p&gt;I want to print &lt;code&gt;&amp;gt;&lt;/code&gt; in the sc...</td>\n","      <td>I want to print &gt; in the script 0 to test the ...</td>\n","      <td>I want to print  in the script 0 to test the c...</td>\n","      <td>&gt;script[0][4][2]name 'script' is not defined\\n...</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>&gt;script[0][4][2]name 'script' is not defined\\n...</td>\n","      <td>55662828</td>\n","      <td>&lt;p&gt;I modified your code slightly:&lt;/p&gt;\\n\\n&lt;pre&gt;...</td>\n","      <td>I modified your code slightly:\\nscript = [['A'...</td>\n","      <td>I modified your code slightly:\\n\\nand it works...</td>\n","      <td>script = [['A','A',['A'],['A'],['A','5','&gt;'],'...</td>\n","      <td>2</td>\n","      <td>24</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>&gt;script[0][4][2]name 'script' is not defined\\n...</td>\n","      <td>I modified your code slightly:\\n\\nand it works...</td>\n","      <td>script = [['A','A',['A'],['A'],['A','5','&gt;'],'...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   question_id  ...                         answer_body_order_codetext\n","0     55661532  ...  socket.socket(socket.AF_INET, socket.SOCK_STRE...\n","1     55661626  ...  socket.socket(socket.AF_INET, socket.SOCK_STRE...\n","2     55661929  ...  x=[]  #your given list\\nfor t in range(len(x))...\n","3     55662778  ...  []appendscript = []\\n\\nscript.append(['A','A',...\n","4     55662778  ...  script = [['A','A',['A'],['A'],['A','5','>'],'...\n","\n","[5 rows x 23 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K6qMHctfz9BE","executionInfo":{"status":"ok","timestamp":1617564857541,"user_tz":300,"elapsed":7609,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}},"outputId":"ce8cfd11-12b9-47c0-9276-939ded46cf4e"},"source":["df.shape"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(60336, 23)"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2T2rDfnfkW4S","executionInfo":{"status":"ok","timestamp":1617564857544,"user_tz":300,"elapsed":6947,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}},"outputId":"5c90792c-76a6-46e1-9ec4-c8f44be96afb"},"source":["df_bert = df[['question_id', 'question_title_body_order_textcode', 'answer_id', 'answer_body_order_textcode', 'is_accepted_answer']]\n","df_bert.head(5)"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>question_id</th>\n","      <th>question_title_body_order_textcode</th>\n","      <th>answer_id</th>\n","      <th>answer_body_order_textcode</th>\n","      <th>is_accepted_answer</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>55661532</td>\n","      <td>When I run my socket program, there get: `impo...</td>\n","      <td>55661630</td>\n","      <td>The answer to your new question is that you ca...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>55661626</td>\n","      <td>with socket.socket(socket.AF_INET, socket.SOCK...</td>\n","      <td>55661660</td>\n","      <td>You can't use  with .  So that a  statement ca...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>55661929</td>\n","      <td>How to display 5 numbers per line from a list?...</td>\n","      <td>55662134</td>\n","      <td>There can be different approaches to the probl...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>55662778</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>55662821</td>\n","      <td>Define list as  and use  to add elements to li...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>55662778</td>\n","      <td>create list with spectial type - Spyder error ...</td>\n","      <td>55662828</td>\n","      <td>I modified your code slightly:\\n\\nand it works...</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   question_id  ... is_accepted_answer\n","0     55661532  ...                  0\n","1     55661626  ...                  1\n","2     55661929  ...                  0\n","3     55662778  ...                  1\n","4     55662778  ...                  0\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tax5v7x-sHxU","executionInfo":{"status":"ok","timestamp":1617564857546,"user_tz":300,"elapsed":6203,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}},"outputId":"5af9fc2d-6f7c-4f6c-bfdc-895018e2e4b4"},"source":["df_bert.dtypes"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["question_id                            int64\n","question_title_body_order_textcode    object\n","answer_id                              int64\n","answer_body_order_textcode            object\n","is_accepted_answer                     int64\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"xGKDmwz9k1hb"},"source":["# Preprocessing"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DQ3wAazOkhy3","executionInfo":{"status":"ok","timestamp":1617564861989,"user_tz":300,"elapsed":8708,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}},"outputId":"a05903e4-7a3b-4adb-e669-4a65d33058b2"},"source":["tokenizer = BertTokenizer.from_pretrained('bert-base-cased')\n","model = TFBertModel.from_pretrained('bert-base-cased')"],"execution_count":10,"outputs":[{"output_type":"stream","text":["Some layers from the model checkpoint at bert-base-cased were not used when initializing TFBertModel: ['nsp___cls', 'mlm___cls']\n","- This IS expected if you are initializing TFBertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n","- This IS NOT expected if you are initializing TFBertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n","All the layers of TFBertModel were initialized from the model checkpoint at bert-base-cased.\n","If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training.\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"HMA6bcUz4c2S"},"source":["### Create Tokens Dictionary"]},{"cell_type":"code","metadata":{"id":"6ZvJipbD-pzq","executionInfo":{"status":"ok","timestamp":1617564861990,"user_tz":300,"elapsed":6933,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}}},"source":["# print(len(df_bert.answer_body[1]))\n","# df_bert.answer_body[1]"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"RY9nxbhh_XYH","executionInfo":{"status":"ok","timestamp":1617564861992,"user_tz":300,"elapsed":6763,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}}},"source":["# testing1 = tokenizer.tokenize(df_bert.answer_body[1])\n","# print(len(testing1))\n","# print(testing1)"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lud0GSbj-oWz","executionInfo":{"status":"ok","timestamp":1617564861994,"user_tz":300,"elapsed":6537,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}}},"source":["\n","# max_length = 10\n","# #Only keep beginning and end tokens.  \n","# #If content has less than max_length (minus 2 for cls and sep) tokens, keep entire content.\n","# if len(testing1) < max_length-2:\n","#   testing2=testing1\n","# else:\n","#   testing2 = testing1[0:(int(max_length/2) - 1)] + testing1[-(int(max_length/2) - 1):]\n","\n","# print(len(testing2))\n","# print(testing2)"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"PkbIRe6Rk5cD","executionInfo":{"status":"ok","timestamp":1617564861995,"user_tz":300,"elapsed":6105,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}}},"source":["tokens_dict = {}"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"rcFsVx3flRa1","executionInfo":{"status":"ok","timestamp":1617565149993,"user_tz":300,"elapsed":293634,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}}},"source":["# One dict for storing every question and answer ID associated with (token IDs, mask IDs, and segment IDs)\n","max_length_question=136 #EDA shows that average length is 135.7\n","for question_id in df_bert['question_id'].unique():\n","  tokens, masks, segments = bf.bert_encode_content_beg_end(df_bert.loc[df_bert['question_id'] == question_id].question_title_body_order_textcode.values[0], tokenizer, max_length_question)\n","  tokens_dict[question_id] = (tokens, masks, segments)\n","\n","max_length_answer=87 #EDA shows that average length is 86.1\n","for answer_id in df_bert['answer_id']:\n","  tokens, masks, segments = bf.bert_encode_content_beg_end(df_bert.loc[df_bert['answer_id'] == answer_id].answer_body_order_textcode.values[0], tokenizer, max_length_answer)\n","  tokens_dict[answer_id] = (tokens, masks, segments)"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"_sIe5wntl7hw","executionInfo":{"status":"ok","timestamp":1617565154105,"user_tz":300,"elapsed":293449,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}}},"source":["# Save tokens dictionary to file\n","tokens_dict_to_file = open('/content/drive/MyDrive/Colab Notebooks/W266 Final Project/data/embeddings/bert_batches_text_code_beg_end/bert_tokens_text_code_beg_end.pickle', 'wb')\n","pickle.dump(tokens_dict, tokens_dict_to_file)"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"3zcOwXyGmJSc","executionInfo":{"status":"ok","timestamp":1617565154471,"user_tz":300,"elapsed":293258,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}}},"source":["# Load tokens dictionary from file\n","tokens_from_file = open('/content/drive/MyDrive/Colab Notebooks/W266 Final Project/data/embeddings/bert_batches_text_code_beg_end/bert_tokens_text_code_beg_end.pickle', 'rb')\n","bert_tokens_dict = pickle.load(tokens_from_file)"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7Pr63PzC4gu_"},"source":["### REFER TO BATCHES FOR CREATING EMBEDDINGS\n"]},{"cell_type":"code","metadata":{"id":"7eEsqxoeZTxg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617565381719,"user_tz":300,"elapsed":273,"user":{"displayName":"John Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi0ElGxTD4WfRf4lVeXeZpRtAdemu75222MUOG8=s64","userId":"01035905861574025218"}},"outputId":"bf5cf0f3-c2d3-4aeb-a67c-c4305ad08962"},"source":["len(bert_tokens_dict.keys())"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["90959"]},"metadata":{"tags":[]},"execution_count":19}]}]}